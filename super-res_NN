[file,path] = uigetfile('Z:\DATA\*.csv');
myfullfile = fullfile(path, file);
rawdata = dlmread(myfullfile,',', 1, 11);

%photon_number = rawdata(1:end, 1);
xdata = rawdata(:,1);
ydata = rawdata(:,2);
%xStdDev = rawdata(1:end, 5);
%yStdDev = rawdata(1:end, 6);
precision = rawdata(:, 5);

number_points = length(xdata);

number_blinks = [];
multiple_blinks_indexes = [];

indexes = [];

single_info = [];
two_info = [];
cluster_info = [];

xdata_cons = [];
ydata_cons = [];
precision_cons = [];
photon_number_cons = [];

i = 1;

xdatacopy = xdata;
ydatacopy = ydata;

distances2 = [];

while i < (length(xdata)+1)
    
    x1 = xdata(i);
    y1 = ydata(i);
    precision1 = precision(i);

    xdiff = abs(xdata - x1);
    ydiff = abs(ydata - y1);
    
    distances = sqrt(xdiff.*xdiff + ydiff.*ydiff);
    
    indexes = find(distances <= precision1);
    
    number_blinks = [number_blinks; length(indexes)];
    
    if number_blinks(i) == 1
        xdata_cons = [xdata_cons; xdata(i)];
        ydata_cons = [ydata_cons; ydata(i)];
        precision_cons = [precision_cons; precision1];
%        photon_number_cons = [photon_number_cons; photon_number(i)];
        
        xdata(indexes) = [];
        ydata(indexes) = [];
        precision(indexes) = [];
        
    else
        xdatai_blinks_point = xdata(indexes);
        average_x_position = mean(xdatai_blinks_point);

        ydatai_blinks_point = ydata(indexes);
        average_y_position = mean(ydatai_blinks_point);

        precision_points = precision(indexes);
        average_precision = mean(precision_points);

%        photon_number_points = photon_number(indexes);
%        total_blink_photon_number = sum(photon_number_points);

        xdata_cons = [xdata_cons; average_x_position];
        ydata_cons = [ydata_cons; average_y_position];
        precision_cons = [precision_cons; average_precision];
%        photon_number_cons = [photon_number_cons; total_blink_photon_number];
        
        xdata(indexes) = [];
        ydata(indexes) = [];
        precision(indexes) = [];
    end
    i = i+1;
   
end

disp("Finished consolidating.");

for j = 1:length(xdata_cons)
    
    x2 = xdata_cons(j);
    y2 = ydata_cons(j);
    
    xdiff2 = abs(xdata_cons - x2);
    ydiff2 = abs(ydata_cons - y2);
    
    distances2(:,j) = sqrt(xdiff2.*xdiff2 + ydiff2.*ydiff2);
end

% precision_cons = zeros(1000,0);

[row, col] = find(distances2 > 0 & distances2 < 160);

number_neighbours = [];

for k = 1:length(xdata_cons)
    number_neighbours = find(col == k);
    
    if isempty(number_neighbours)
        single_info = [single_info; xdata_cons(k) ydata_cons(k) number_blinks(k) precision_cons(k)];
    elseif length(number_neighbours) == 1
%        total_photon_number = photon_number_cons(k) + photon_number_cons(row(number_neighbours));
        two_info = [two_info; xdata_cons(k) ydata_cons(k) xdata_cons(row(number_neighbours)) ydata_cons(row(number_neighbours)) distances2(row(number_neighbours),col(number_neighbours)) number_blinks(k) number_blinks(row(number_neighbours)) precision_cons(k) precision_cons(row(number_neighbours))];
    elseif length(number_neighbours) > 1
        cluster_info = [cluster_info; xdata_cons(k) ydata_cons(k) number_blinks(k) precision_cons(k)];
    else
    end
end

b = 1;

if ~isempty(two_info) && ~isempty(single_info)
    while b < (length(two_info(:,1))+1)

        x = two_info(b,3);
        y = two_info(b,4);
        number_blinks_two = two_info(b,6);
        precision_two = two_info(b,9);


        if ~isempty(cluster_info)
            x_two_in_cluster = find(cluster_info(:,1) == x);
            y_two_in_cluster = find(cluster_info(:,2) == y);

            if length(x_two_in_cluster) >= 1 && length(y_two_in_cluster) >= 1
                cluster_info = [cluster_info; x y number_blinks_two precision_two];
                two_info(b,:) = [];
            else
            end
        else
        end

        x_two_in_single = find(single_info(:,1) == x);
        y_two_in_single = find(single_info(:,2) == y);


        if length(x_two_in_single) >= 1 && length(y_two_in_single) >= 1
            single_info = [single_info; x y number_blinks_two precision_two];
            two_info(b,:) = [];
        else
        end
        b = b+1;
    end

    [C,ia,ic] = unique(two_info(:,5));
    a_counts = accumarray(ic,1);
    value_counts = [C, a_counts];

    value_1 = find(a_counts == 1);
    ia(value_1) = [];
    two_info = two_info(ia,:);
else
end

three_info = [];
four_info = [];

if ~isempty(cluster_info)

    number_of_clusters = 0;

    cluster_info_x = cluster_info(:,1);
    cluster_info_y = cluster_info(:,2);

    number_of_points_in_cluster = zeros(1,13);

    l = 1;

    while l < (length(cluster_info_x) + 1)
        if isempty(cluster_info_x)
            l = length_cix;
        else
            cixi = cluster_info_x(l);
            ciyi = cluster_info_y(l);

            ci_diffx = cluster_info_x - cixi;
            ci_diffy = cluster_info_y - ciyi;

            ci_distances = sqrt(ci_diffx.*ci_diffx + ci_diffy.*ci_diffy);

            ci_indexes = find(ci_distances < 120);

            if isempty(ci_indexes)
            elseif length(ci_indexes) == 1
                single_info = [single_info; cluster_info(l,1) cluster_info(l,2) cluster_info(1,3) cluster_info(1,4)];
                cluster_info(ci_indexes,:) = [];
                cluster_info_x(ci_indexes) = [];
                cluster_info_y(ci_indexes) = [];
                number_of_clusters = number_of_clusters + 1;
            elseif length(ci_indexes) == 2
%                total_photon_number = cluster_info(ci_indexes(1),5) + cluster_info(ci_indexes(2),5);
                two_info = [two_info; cluster_info(ci_indexes(1),1) cluster_info(ci_indexes(1),2) cluster_info(ci_indexes(2),1) cluster_info(ci_indexes(2),2) ci_distances(ci_indexes(2)) cluster_info(ci_indexes(1),3) cluster_info(ci_indexes(2),3) cluster_info(ci_indexes(1),4) cluster_info(ci_indexes(2),4)];
                cluster_info(ci_indexes,:) = [];
                cluster_info_x(ci_indexes) = [];
                cluster_info_y(ci_indexes) = [];
                number_of_clusters = number_of_clusters + 1;
            elseif length(ci_indexes) == 3
                number_of_points_in_cluster(3) = number_of_points_in_cluster(3) + 1;
                three_info = [three_info; cluster_info(ci_indexes(1),1) cluster_info(ci_indexes(1),2) cluster_info(ci_indexes(2),1) cluster_info(ci_indexes(2),2) cluster_info(ci_indexes(3),1) cluster_info(ci_indexes(3),2) cluster_info(ci_indexes(1),4) cluster_info(ci_indexes(2),4) cluster_info(ci_indexes(3),4)];
                cluster_info_x(ci_indexes) = NaN;
                cluster_info_y(ci_indexes) = NaN;
                number_of_clusters = number_of_clusters + 1;
            elseif length(ci_indexes) == 4
                number_of_points_in_cluster(4) = number_of_points_in_cluster(4) + 1;
                four_info = [four_info; cluster_info(ci_indexes(1),1) cluster_info(ci_indexes(1),2) cluster_info(ci_indexes(2),1) cluster_info(ci_indexes(2),2) cluster_info(ci_indexes(3),1) cluster_info(ci_indexes(3),2) cluster_info(ci_indexes(4),1) cluster_info(ci_indexes(4),2) cluster_info(ci_indexes(1),4) cluster_info(ci_indexes(2),4) cluster_info(ci_indexes(3),4) cluster_info(ci_indexes(4),4)];
                cluster_info_x(ci_indexes) = NaN;
                cluster_info_y(ci_indexes) = NaN;
                number_of_clusters = number_of_clusters + 1;
            elseif length(ci_indexes) == 5
                number_of_points_in_cluster(5) = number_of_points_in_cluster(5) + 1;
                cluster_info_x(ci_indexes) = NaN;
                cluster_info_y(ci_indexes) = NaN;
                number_of_clusters = number_of_clusters + 1;
            elseif length(ci_indexes) == 6
                number_of_points_in_cluster(6) = number_of_points_in_cluster(6) + 1;
                cluster_info_x(ci_indexes) = NaN;
                cluster_info_y(ci_indexes) = NaN;
                number_of_clusters = number_of_clusters + 1;
            elseif length(ci_indexes) == 7
                number_of_points_in_cluster(7) = number_of_points_in_cluster(7) + 1;
                cluster_info_x(ci_indexes) = NaN;
                cluster_info_y(ci_indexes) = NaN;
                number_of_clusters = number_of_clusters + 1;
            elseif length(ci_indexes) == 8
                number_of_points_in_cluster(8) = number_of_points_in_cluster(8) + 1;
                cluster_info_x(ci_indexes) = NaN;
                cluster_info_y(ci_indexes) = NaN;
                number_of_clusters = number_of_clusters + 1;
            elseif length(ci_indexes) == 9
                number_of_points_in_cluster(9) = number_of_points_in_cluster(9) + 1;
                cluster_info_x(ci_indexes) = NaN;
                cluster_info_y(ci_indexes) = NaN;
                number_of_clusters = number_of_clusters + 1;
            elseif length(ci_indexes) == 10
                number_of_points_in_cluster(10) = number_of_points_in_cluster(10) + 1;
                cluster_info_x(ci_indexes) = NaN;
                cluster_info_y(ci_indexes) = NaN;
                number_of_clusters = number_of_clusters + 1;
            elseif length(ci_indexes) == 11
                number_of_points_in_cluster(11) = number_of_points_in_cluster(11) + 1;
                cluster_info_x(ci_indexes) = NaN;
                cluster_info_y(ci_indexes) = NaN;
                number_of_clusters = number_of_clusters + 1;
            elseif length(ci_indexes) == 12
                number_of_points_in_cluster(12) = number_of_points_in_cluster(12) + 1;
                cluster_info_x(ci_indexes) = NaN;
                cluster_info_y(ci_indexes) = NaN;
                number_of_clusters = number_of_clusters + 1;
            else
                number_of_points_in_cluster(13) = number_of_points_in_cluster(13) + 1;
                cluster_info_x(ci_indexes) = NaN;
                cluster_info_y(ci_indexes) = NaN;
                number_of_clusters = number_of_clusters + 1;
            end
        end
        l = l + 1;
    end
else
end

if ~isempty(two_info)
    dimers_that_are_single = find(two_info(:,5) == 0);
    single_info = [single_info; two_info(dimers_that_are_single,1) two_info(dimers_that_are_single,2) two_info(dimers_that_are_single,5) two_info(dimers_that_are_single,8)];
    two_info(dimers_that_are_single,:) = [];
    number_of_points_in_cluster(2) = length(two_info(:,1));
else
end

if ~isempty(single_info)
    number_of_points_in_cluster(1) = length(single_info(:,1));
    one_points = ["Number of points with no near neighbours: ", num2str(length(single_info(:,1)))];
    new_one_point = join(one_points);
else
    new_one_point = ["There are no single points."];
end

if ~isempty(cluster_info)
    av_number_per_cluster = length(cluster_info(:,1)) / number_of_clusters;
    cluster_points = ["Number of points with more than one neighbours: ", num2str(length(cluster_info(:,1)))];
    cluster_points_avs = ["There are ", num2str(number_of_clusters), "clusters, and the average number of points per cluster is ", num2str(av_number_per_cluster)];
    new_cluster_points = join(cluster_points);
    new_cluster_points_avs = join(cluster_points_avs);
else
    new_cluster_points = ["There are no clusters."];
    new_cluster_points_avs = ["There are no clusters."];
end


if ~isempty(two_info)
    av_pair_distance = sum(two_info(:,5)) / length(two_info(:,5));
    two_points_av_distance = ["There are ", num2str(length(two_info(:,5))), "pairs of points, with an average separation distance of ", num2str(av_pair_distance), " nm"];
    new_two_points_av_distance = join(two_points_av_distance);
else
    new_two_points_av_distance = ["There are no dimers."];
end


%numbers_in_clusters = [one_point, two_point, three_point, four_point, five_point, six_point, seven_point, eight_point, nine_point, ten_point, eleven_point, twelve_point, more_than_twelve_point];




% disp(new_one_point)
% disp(new_two_points_av_distance)
% disp(new_cluster_points)
% disp(new_cluster_points_avs)
disp(number_of_points_in_cluster)

%myfullfile7 = fullfile(path, "trimer_stats_9.csv");
%writematrix(three_info, myfullfile7);
%myfullfile8 = fullfile(path, "four_stats_9.csv");
%writematrix(four_info, myfullfile8);
%myfullfile9 = fullfile(path, "dimer_stats_9.csv");
%writematrix(two_info, myfullfile9);
%myfullfile10 = fullfile(path, "monomer_stats_9.csv");
%writematrix(single_info, myfullfile10);

%myfullfile2 = fullfile(path, "dimer_separation_distances_new.csv");
%writematrix(pair_distances_2, myfullfile2)
%myfullfile3 = fullfile(path, "single_local_blink_stats.csv");
%writematrix(single_info, myfullfile3)
%myfullfile4 = fullfile(path, "dual_local_blink_stats_r1w2.csv");
%writematrix(two_info, myfullfile4)
%myfullfile5 = fullfile(path, "cluster_local_blink_stats.csv");
%writematrix(cluster_info, myfullfile5)
%myfullfile6 = fullfile(path, "angles_between_dimer_pairs.csv");
%writematrix(angle_dimers, myfullfile6)
% 
if ~isempty(single_info) && ~isempty(two_info) && ~isempty(cluster_info)
    plot(single_info(:,1), single_info(:,2), 'g.', cluster_info(:,1), cluster_info(:,2), 'r.', two_info(:,1), two_info(:,2), 'b.', two_info(:,3), two_info(:,4), 'b.')
elseif ~isempty(single_info) && isempty(two_info) && ~isempty(cluster_info)
    plot(single_info(:,1), single_info(:,2), 'g.', cluster_info(:,1), cluster_info(:,2), 'r.')
elseif ~isempty(single_info) && ~isempty(two_info) && isempty(cluster_info)
    plot(single_info(:,1), single_info(:,2), 'g.', two_info(:,1), two_info(:,2), 'b.', two_info(:,3), two_info(:,4), 'b.')
elseif ~isempty(single_info) && isempty(two_info) && isempty(cluster_info)
    plot(single_info(:,1), single_info(:,2), 'g.')
else
end

%plot(single_info(:,1), single_info(:,2), 'r.', cluster_info(:,1), cluster_info(:,2), 'r.', two_info(:,1), two_info(:,2), 'r.', two_info(:,3), two_info(:,4), 'r.', three_info(:,1), three_info(:,2), 'b.', three_info(:,3), three_info(:,4), 'b.', three_info(:,5), three_info(:,6), 'b.')
% 
% if ~isempty(single_info) && ~isempty(number_of_points_in_cluster(3)) && ~isempty(cluster_info)
%     plot(single_info(:,1), single_info(:,2), 'g.', cluster_info(:,1), cluster_info(:,2), 'r.', number_of_points_in_cluster(3)(:,1), number_of_points_in_cluster(3)(:,2), 'b.', two_info(:,3), two_info(:,4), 'b.')
% elseif ~isempty(single_info) && isempty(two_info) && ~isempty(cluster_info)
%     plot(single_info(:,1), single_info(:,2), 'g.', cluster_info(:,1), cluster_info(:,2), 'r.')
% elseif ~isempty(single_info) && ~isempty(two_info) && isempty(cluster_info)
%     plot(single_info(:,1), single_info(:,2), 'g.', two_info(:,1), two_info(:,2), 'b.', two_info(:,3), two_info(:,4), 'b.')
% elseif ~isempty(single_info) && isempty(two_info) && isempty(cluster_info)
%     plot(single_info(:,1), single_info(:,2), 'g.')
% else
% end

